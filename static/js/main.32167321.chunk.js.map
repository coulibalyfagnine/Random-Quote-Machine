{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","tumblr","console","log","newQuote","cursor","Math","floor","random","state","quote","length","setState","currentQuote","currentAuthor","author","twitterHref","encodeURIComponent","tumblrHref","twitter","bind","fetch","then","res","json","quotes","this","id","className","onClick","title","href","icon","Component","library","add","fab","faCheckSquare","faCoffee","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oUAgHeA,G,wDA1GX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAyCdC,OAAS,WACLC,QAAQC,IAAI,8CA3CM,EA8CtBC,SAAW,WACP,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,MAAMC,QACzD,EAAKC,SAAS,CAACC,aAAa,EAAKJ,MAAMC,MAAML,GAAQK,MACtCI,cAAe,EAAKL,MAAMC,MAAML,GAAQU,OACxCC,YAAa,8EACXC,mBAAmB,IAAM,EAAKR,MAAMC,MAAML,GAAQK,MAAQ,KAC1D,EAAKD,MAAMC,MAAML,GAAQU,QAE3BG,WAAY,6FACVD,mBAAmB,IAAM,EAAKR,MAAMC,MAAML,GAAQK,MAAQ,KAC1D,EAAKD,MAAMC,MAAML,GAAQU,WAtDtC,EAAKN,MAAQ,CAACC,MAAO,GACPG,aAAc,GACdC,cAAc,GACdE,YAAc,GACdE,WAAY,IAG9B,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBATG,E,gEAYE,IAAD,OAEfC,MAAM,0IACTC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,EAAKX,SAAS,CAACF,MAAOa,EAAIE,SAC1B,IAAIpB,EAASC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,MAAMC,QACzD,EAAKC,SAAS,CAACC,aAAa,EAAKJ,MAAMC,MAAML,GAAQK,MACtCI,cAAe,EAAKL,MAAMC,MAAML,GAAQU,OACxCC,YAAa,8EACVC,mBAAmB,IAAM,EAAKR,MAAMC,MAAML,GAAQK,MAAQ,KAC1D,EAAKD,MAAMC,MAAML,GAAQU,QAE3BG,WAAY,6FACVD,mBAAmB,IAAM,EAAKR,MAAMC,MAAML,GAAQK,MAAQ,KAC1D,EAAKD,MAAMC,MAAML,GAAQU,e,gCAU/Cb,QAAQC,IAAI,6CACZD,QAAQC,IAAIuB,KAAKjB,MAAMC,MAAM,GAAGA,S,+BA0B5B,OAGI,yBAAKiB,GAAG,aAEJ,yBAAKC,UAAU,8BACX,0BAAMD,GAAG,QAAQD,KAAKjB,MAAMI,eAEhC,yBAAMe,UAAU,wBAAhB,KACM,0BAAMD,GAAG,UAAT,IAAoBD,KAAKjB,MAAMK,gBAErC,yBAAKc,UAAU,cAGP,4BAAQA,UAAU,aAAaD,GAAG,gBAAgBE,QAAUH,KAAKP,QAASW,MAAM,+BAC5E,uBAAGH,GAAG,cAAcI,KAAML,KAAKjB,MAAMO,aACjC,kBAAC,IAAD,CAAiBY,UAAU,OAAOI,KAAM,CAAC,MAAO,eAMxD,4BAAQJ,UAAU,aAAaD,GAAG,eAAgBE,QAAUH,KAAKzB,OAAQ6B,MAAM,8BAC3E,uBAAGH,GAAG,aAAaI,KAAML,KAAKjB,MAAMS,YAChC,kBAAC,IAAD,CAAiBU,UAAU,OAAOI,KAAM,CAAC,MAAO,cAM5D,4BAAQJ,UAAU,SAASD,GAAG,YAAYE,QAAUH,KAAKtB,UAAzD,cAGR,yBAAKwB,UAAU,UAAf,OAA4B,uBAAGG,KAAK,uCAAR,oB,GAlGrBE,cCInBC,IAAQC,IAAIC,IAAKC,IAAeC,KAYjBC,MAVf,WACE,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,sBAChB,kBAAC,EAAD,SCHYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.32167321.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n//import './index.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport 'tachyons';\r\n\r\nclass Card extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {quote :[], \r\n                      currentQuote: '',\r\n                      currentAuthor:'',\r\n                      twitterHref : '',\r\n                      tumblrHref: ''\r\n                     }\r\n\r\n    this.twitter = this.twitter.bind(this);        \r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n    .then(res => res.json())\r\n    .then(res =>{ \r\n        this.setState({quote: res.quotes});\r\n        let cursor = Math.floor(Math.random() * this.state.quote.length);\r\n        this.setState({currentQuote:this.state.quote[cursor].quote,\r\n                       currentAuthor: this.state.quote[cursor].author,\r\n                       twitterHref: 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' \r\n                        + encodeURIComponent('\"' + this.state.quote[cursor].quote + '\" '\r\n                        + this.state.quote[cursor].author) ,\r\n\r\n                        tumblrHref: 'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=' \r\n                        + encodeURIComponent('\"' + this.state.quote[cursor].quote + '\" '\r\n                        + this.state.quote[cursor].author)\r\n                    });\r\n    \r\n    } );\r\n\r\n    }\r\n\r\n     \r\n\r\ntwitter(){\r\n    console.log(\"you have cliecked on the twiter button ? \");\r\n    console.log(this.state.quote[1].quote);\r\n    // window.open(\"https://www.twitter.com/intent/tweet/\")\r\n}\r\n\r\ntumblr = () =>{\r\n    console.log(\"you have cliecked on the tumblr button ? \");\r\n}\r\n\r\nnewQuote = () =>{\r\n    let cursor = Math.floor(Math.random() * this.state.quote.length);\r\n    this.setState({currentQuote:this.state.quote[cursor].quote, \r\n                   currentAuthor: this.state.quote[cursor].author,\r\n                   twitterHref: 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' \r\n                   + encodeURIComponent('\"' + this.state.quote[cursor].quote + '\" '\r\n                   + this.state.quote[cursor].author), \r\n\r\n                   tumblrHref: 'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=' \r\n                   + encodeURIComponent('\"' + this.state.quote[cursor].quote + '\" '\r\n                   + this.state.quote[cursor].author)\r\n     });\r\n    \r\n   \r\n   \r\n}\r\n    render(){\r\n        \r\n        return(\r\n\r\n            \r\n            <div id=\"quote-box\" >\r\n            \r\n                <div className='navy br3 pa2 grow shadow-5'>\r\n                    <span id=\"text\">{this.state.currentQuote}</span>\r\n                </div>\r\n                <div  className='quote-author tr navy'>\r\n                    - <span id=\"author\"> {this.state.currentAuthor}</span>\r\n                </div>\r\n                <div className='buttons tl'>\r\n\r\n                    \r\n                        <button className=\"button ma1\" id=\"twitter-quote\" onClick ={this.twitter} title=\"Post this quote on twitter!\">\r\n                            <a id=\"tweet-quote\" href={this.state.twitterHref}>\r\n                                <FontAwesomeIcon className=\"icon\" icon={['fab', 'twitter']} />\r\n                            </a>\r\n                        </button>\r\n\r\n                    \r\n                    \r\n                        <button className=\"button ma1\" id=\"tumblr-quote\"  onClick ={this.tumblr} title=\"Post this quote on tumblr!\">\r\n                            <a id=\"tumb-quote\" href={this.state.tumblrHref}>\r\n                                <FontAwesomeIcon className=\"icon\" icon={['fab', 'tumblr']} />\r\n                            </a>\r\n                        </button>\r\n                    \r\n                    \r\n                    \r\n                    <button className=\"button\" id=\"new-quote\" onClick ={this.newQuote}>New quote</button>\r\n                </div>\r\n\r\n            <div className=\"footer\"> by <a href=\"https://github.com/coulibalyfagnine\">Fagnin√©</a></div>\r\n        </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\nimport './App.css';\nimport './index.scss';\n//import ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faCheckSquare, faCoffee } from '@fortawesome/free-solid-svg-icons'\n //import Gadget from './Gadget';\n import Card from './Card';\nlibrary.add(fab, faCheckSquare, faCoffee)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header bg-navy\">\n        <Card />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n/*import ReactDOM from 'react-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons'\n \nconst element = <FontAwesomeIcon icon={faCoffee} />\n \nReactDOM.render(element, document.getElementById('root'))\n*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}